{"version":3,"sources":["logo.svg","components/apiKey.js","components/pruebas.jsx","pages/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["API","Prueba","props","useEffect","lat","long","a","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","fetch","ciudad","prueba","json","r","hourly","hour","fetchData","Main","useState","setciudad","onSubmit","e","preventDefault","target","textCiudad","value","action","type","name","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAAe,I,4BCEAA,EAFL,mC,OCuCKC,MApCf,SAAgBC,GA+BZ,OA7BAC,qBAAU,WAEN,IAAIC,EAAI,EACJC,EAAK,EAHG,4CAIZ,kCAAAC,EAAA,6DACIC,UAAUC,YAAYC,oBAAmB,SAASC,GAC9CC,QAAQC,IAAIF,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,WACtDX,EAAIM,EAASG,OAAOC,SACpBT,EAAKK,EAASG,OAAOE,aAJ7B,SAQuBC,MAAM,qDAAD,OAAsDd,EAAMe,OAA5D,kBAA4EjB,IARxG,cAQQkB,EARR,gBASkBA,EAAOC,OATzB,cASQC,EATR,OAWIT,QAAQC,IAAIQ,GAXhB,UAcuBJ,MAAM,uDAAD,OAAwDZ,EAAxD,gBAAmEC,EAAnE,+BAA8FL,IAd1H,eAcQqB,EAdR,iBAeqBA,EAAOF,OAf5B,QAeQG,EAfR,OAgBIX,QAAQC,IAAIU,GAhBhB,6CAJY,0DAuBZC,KAED,CAACrB,EAAMe,SAKN,sC,OCNOO,MAzBf,WAEI,MAAwBC,mBAAS,UAAjC,mBAAKR,EAAL,KAAYS,EAAZ,KAUA,OACI,gCACI,uBAAMC,SAVE,SAACC,GACdA,EAAEC,iBACLlB,QAAQC,IAAIgB,EAAEE,OAAOC,WAAWC,OAChCN,EAAUE,EAAEE,OAAOC,WAAWC,QAOIC,OAAO,GAAjC,UACK,uBAAOC,KAAK,OAAOC,KAAK,eACxB,wBAAQD,KAAK,SAAb,yBAGL,cAAC,EAAD,CAAQjB,OAAQA,QCVbmB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d62ae99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","let API = 'ecba330aa4975ad72076bd9a40f12507';\r\n\r\nexport default API;","import { useEffect } from \"react\"\r\nimport API from \"./apiKey\";\r\n\r\nfunction Prueba(props) {\r\n\r\n    useEffect(() => {\r\n\r\n        let lat=0\r\n        let long=0\r\n        async function fetchData() {\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n                console.log(position.coords.latitude, position.coords.longitude);\r\n                lat=position.coords.latitude;\r\n                long=position.coords.longitude\r\n              });\r\n             \r\n            // You can await here\r\n            let prueba = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${props.ciudad}&appid=${API}`)\r\n            let r = await prueba.json();\r\n\r\n            console.log(r)\r\n         \r\n\r\n            let hourly = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=metric&appid=${API}`)\r\n            let hour = await hourly.json();\r\n            console.log(hour)\r\n\r\n        }\r\n        fetchData();\r\n\r\n    }, [props.ciudad]);\r\n\r\n\r\n\r\n    return (\r\n        <p>asfd</p>\r\n    )\r\n}\r\n\r\nexport default Prueba;","import react from \"react\"\r\nimport { useState } from \"react\";\r\nimport Prueba from \"../components/pruebas.jsx\";\r\n\r\nfunction Main() {\r\n\r\n    let [ciudad,setciudad]= useState('MADRID');\r\n\r\n   const buscador = (e)=>{\r\n       e.preventDefault();\r\n    console.log(e.target.textCiudad.value)\r\n    setciudad(e.target.textCiudad.value)\r\n\r\n        \r\n   }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={buscador} action=\"\">\r\n                 <input type=\"text\" name=\"textCiudad\"/> \r\n                 <button type=\"submit\">Buscador</button>\r\n            </form>\r\n          \r\n            <Prueba ciudad={ciudad}></Prueba>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Main;","import logo from './logo.svg';\nimport './App.css';\nimport Prueba from './components/pruebas.jsx';\nimport Main from './pages/index.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}